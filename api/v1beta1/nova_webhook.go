/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

//
// Generated by:
//
// operator-sdk create webhook --group nova --version v1beta1 --kind Nova --programmatic-validation --defaulting
//

package v1beta1

import (
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/webhook"
)

// NovaDefaults -
type NovaDefaults struct {
	APIContainerImageURL       string
	ConductorContainerImageURL string
	MetadataContainerImageURL  string
	NoVNCContainerImageURL     string
	SchedulerContainerImageURL string
}

var novaDefaults NovaDefaults

// log is for logging in this package.
var novalog = logf.Log.WithName("nova-resource")

// SetupNovaDefaults - initialize Nova spec defaults for use with either internal or external webhooks
func SetupNovaDefaults(defaults NovaDefaults) {
	novaDefaults = defaults
	novalog.Info("Nova defaults initialized", "defaults", defaults)
}

// SetupWebhookWithManager sets up the webhook with the Manager
func (r *Nova) SetupWebhookWithManager(mgr ctrl.Manager) error {
	return ctrl.NewWebhookManagedBy(mgr).
		For(r).
		Complete()
}

//+kubebuilder:webhook:path=/mutate-nova-openstack-org-v1beta1-nova,mutating=true,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=nova,verbs=create;update,versions=v1beta1,name=mnova.kb.io,admissionReviewVersions=v1

var _ webhook.Defaulter = &Nova{}

// Default implements webhook.Defaulter so a webhook will be registered for the type
func (r *Nova) Default() {
	novalog.Info("default", "name", r.Name)

	r.Spec.Default()
}

// Default - set defaults for this Nova spec
func (spec *NovaSpec) Default() {
	if spec.APIServiceTemplate.ContainerImage == "" {
		spec.APIServiceTemplate.ContainerImage = novaDefaults.APIContainerImageURL
	}

	if spec.MetadataServiceTemplate.ContainerImage == "" {
		spec.MetadataServiceTemplate.ContainerImage = novaDefaults.MetadataContainerImageURL
	}

	if spec.SchedulerServiceTemplate.ContainerImage == "" {
		spec.SchedulerServiceTemplate.ContainerImage = novaDefaults.SchedulerContainerImageURL
	}

	for key, cellTemplate := range spec.CellTemplates {
		if cellTemplate.ConductorServiceTemplate.ContainerImage == "" {
			cellTemplate.ConductorServiceTemplate.ContainerImage = novaDefaults.ConductorContainerImageURL
		}

		if cellTemplate.MetadataServiceTemplate.ContainerImage == "" {
			cellTemplate.MetadataServiceTemplate.ContainerImage = novaDefaults.MetadataContainerImageURL
		}

		if cellTemplate.NoVNCProxyServiceTemplate.ContainerImage == "" {
			cellTemplate.NoVNCProxyServiceTemplate.ContainerImage = novaDefaults.NoVNCContainerImageURL
		}

		// "cellTemplate" is a by-value copy, so we need to re-inject the updated version of it into the map
		spec.CellTemplates[key] = cellTemplate
	}
}

// NOTE: change verbs to "verbs=create;update;delete" if you want to enable deletion validation.
//+kubebuilder:webhook:path=/validate-nova-openstack-org-v1beta1-nova,mutating=false,failurePolicy=fail,sideEffects=None,groups=nova.openstack.org,resources=nova,verbs=create;update,versions=v1beta1,name=vnova.kb.io,admissionReviewVersions=v1

var _ webhook.Validator = &Nova{}

// ValidateCreate implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateCreate() error {
	novalog.Info("validate create", "name", r.Name)

	// TODO(user): fill in your validation logic upon object creation.
	return nil
}

// ValidateUpdate implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateUpdate(old runtime.Object) error {
	novalog.Info("validate update", "name", r.Name)

	// TODO(user): fill in your validation logic upon object update.
	return nil
}

// ValidateDelete implements webhook.Validator so a webhook will be registered for the type
func (r *Nova) ValidateDelete() error {
	novalog.Info("validate delete", "name", r.Name)

	// TODO(user): fill in your validation logic upon object deletion.
	return nil
}
